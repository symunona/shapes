{
  "env": {
    "browser": true,
    "amd": true,
    "mocha": true
  },

  "parserOptions": { "ecmaVersion": 6 },

  // Define the basic ruleset
  "extends": "eslint:recommended",
  // see what is included in it (the piped rules): http://eslint.org/docs/rules/

  // Define manual globals that are accepted also without definition.
  "globals": {
    //  They should be removed, when it will be integrated into the module system.
    "appVersion": true,
    // defined in index_dev.html, automatically generated by the build tool.
    "requirejs": true,
    "module": true,
    "sinon": true,
    "expect": true,
    "isNaN": true,
    "JSON": true
  },
  // Define the rules that want to use different way than the "exlint:recommended"
  "rules": {

    // Best Practices
    "block-scoped-var": "error",
    "eqeqeq": "error",
    "curly": "error",
    "dot-notation": "error",
    "dot-location": [
      "error",
      "property"
    ],
    "no-caller": "error",
    "no-else-return": "error",

    "no-eval": "error",
    "no-extend-native": "error",
    "no-implicit-coercion": "error",
    // "no-magic-numbers": ["error", { "ignore": [0, 1, 10, 2, 100, -1, 1000] }],
    "no-multi-spaces": "error",
    "no-multi-str": "error",

    "no-self-compare": "error",
    "no-sequences": "error",
    "no-throw-literal": "error",
    "no-useless-return": "error",
    "no-with": "error",
    "yoda": "error",
    "strict": ["error", "function"],

    // Move to error if ticket UX-1086 is fixed
//    "no-alert": "warn",

    // Variables
    "no-unused-vars": "error",

    // Style
    "brace-style": [
      "error",
      "1tbs",
      {"allowSingleLine": true}
    ],
    "array-bracket-spacing": [
      "error",
      "never"
    ],
    "block-spacing": ["error", "always"],
    "comma-dangle": ["error", "never"],
    "comma-spacing": "error",
    "comma-style": ["error", "last"],
    "eol-last": ["error", "always"],
    "func-call-spacing": "error",
    "key-spacing": "error",
    "keyword-spacing": "error",
    "object-curly-spacing": "error",
    "operator-linebreak": ["error", "after", { "overrides": { "?": "before", ":": "before" } }],
    "padded-blocks": ["error", "never"],
    "space-before-blocks": "error",
    "space-before-function-paren": "error",
    "space-in-parens": "error",
    "space-infix-ops": "error",
    "space-unary-ops": "error",

    "quotes": ["error", "single"],

    "indent": [
      "error",
      4,
      {
        "SwitchCase": 1
      }
    ],

    // Comments
    "spaced-comment": "error",
    "lines-around-comment": ["error",{
      "allowObjectStart": true,
      "allowBlockStart": true
    }],
    "no-bitwise": "error",
    "no-multiple-empty-lines": "error",
    "no-nested-ternary": "error",
    "no-trailing-spaces": "error",
    "no-unneeded-ternary": "error",
    "no-whitespace-before-property": "error",

    // jsDoc styles
    // "require-jsdoc": ["error"],
    "valid-jsdoc": [
      "error",
      {
        "prefer": {
          "return": "returns"
        },
        "requireReturn": false,
        "requireParamDescription": false,
        "requireReturnDescription": false,
        "preferType": {
          "object": "Object",
          "string": "String",
          "array": "Array",
          "number": "Number",
          "boolean": "Boolean",
          "promise": "Promise",
          "function": "Function"

        }
      }
    ]
  }
}
